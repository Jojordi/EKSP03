#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.2 on Thu Oct 14 18:34:20 2021
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from . import canvas_panel
# end wxGlade


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((950, 720))
        self.SetTitle(u"Programación Automática IMA")

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.panel_2.SetBackgroundColour(wx.Colour(255, 255, 255))
        sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_procesamiento = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, "Procesamiento e Input"), wx.VERTICAL)

        sizer_pieza_geometria = wx.BoxSizer(wx.VERTICAL)
        sizer_procesamiento.Add(sizer_pieza_geometria, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 2)

        sizer_datos_iniciales = wx.BoxSizer(wx.VERTICAL)
        sizer_pieza_geometria.Add(sizer_datos_iniciales, 0, wx.EXPAND, 0)

        sizer_eleccion_datos = wx.BoxSizer(wx.HORIZONTAL)
        sizer_datos_iniciales.Add(sizer_eleccion_datos, 0, wx.EXPAND, 0)

        self.button_seleccion_archivo = wx.Button(self.panel_2, wx.ID_ANY, "Seleccionar archivo")
        self.button_seleccion_archivo.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_eleccion_datos.Add(self.button_seleccion_archivo, 1, wx.ALL | wx.EXPAND, 2)

        self.radio_box_tipo_pieza = wx.RadioBox(self.panel_2, wx.ID_ANY, "Tipo de Pieza", choices=["Placa", "Cilindro", "Cono"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
        self.radio_box_tipo_pieza.SetFont(wx.Font(10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        self.radio_box_tipo_pieza.SetSelection(0)
        sizer_datos_iniciales.Add(self.radio_box_tipo_pieza, 0, wx.ALL | wx.EXPAND, 1)

        sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, u"Posición respecto a referencia:"), wx.VERTICAL)
        sizer_procesamiento.Add(sizer_7, 1, wx.ALL | wx.EXPAND, 2)

        grid_sizer_posicionamiento = wx.GridSizer(6, 2, 0, 0)
        sizer_7.Add(grid_sizer_posicionamiento, 0, wx.EXPAND, 0)

        label_35 = wx.StaticText(self.panel_2, wx.ID_ANY, u"Posición en eje X [mm]:")
        label_35.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_posicionamiento.Add(label_35, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_posicion_x = wx.TextCtrl(self.panel_2, wx.ID_ANY, "0")
        grid_sizer_posicionamiento.Add(self.text_ctrl_posicion_x, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_36 = wx.StaticText(self.panel_2, wx.ID_ANY, u"Posición en eje Y [mm]:")
        label_36.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_posicionamiento.Add(label_36, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_posicion_y = wx.TextCtrl(self.panel_2, wx.ID_ANY, "0")
        grid_sizer_posicionamiento.Add(self.text_ctrl_posicion_y, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_37 = wx.StaticText(self.panel_2, wx.ID_ANY, u"Posición en eje Z [mm]:")
        label_37.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_posicionamiento.Add(label_37, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_posicion_z = wx.TextCtrl(self.panel_2, wx.ID_ANY, "0")
        grid_sizer_posicionamiento.Add(self.text_ctrl_posicion_z, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_46 = wx.StaticText(self.panel_2, wx.ID_ANY, u"Ángulo respecto a eje X [°]:")
        label_46.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_posicionamiento.Add(label_46, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_angulo_x = wx.TextCtrl(self.panel_2, wx.ID_ANY, "0")
        grid_sizer_posicionamiento.Add(self.text_ctrl_angulo_x, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_47 = wx.StaticText(self.panel_2, wx.ID_ANY, u"Ángulo respecto a eje Y [°]:")
        label_47.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_posicionamiento.Add(label_47, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_angulo_y = wx.TextCtrl(self.panel_2, wx.ID_ANY, "0")
        grid_sizer_posicionamiento.Add(self.text_ctrl_angulo_y, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_45 = wx.StaticText(self.panel_2, wx.ID_ANY, u"Ángulo respecto a eje Z [°]:")
        label_45.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_posicionamiento.Add(label_45, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_angulo_z = wx.TextCtrl(self.panel_2, wx.ID_ANY, "0")
        grid_sizer_posicionamiento.Add(self.text_ctrl_angulo_z, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, u"Parámetros de soldadura"), wx.VERTICAL)
        sizer_procesamiento.Add(sizer_6, 1, wx.ALL | wx.EXPAND, 2)

        grid_sizer_14 = wx.GridSizer(6, 2, 0, 0)
        sizer_6.Add(grid_sizer_14, 0, wx.EXPAND, 0)

        label_39 = wx.StaticText(self.panel_2, wx.ID_ANY, "Material alambre:")
        label_39.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_14.Add(label_39, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.combo_box_materiales_alambre = wx.ComboBox(self.panel_2, wx.ID_ANY, choices=["ER70S-6"], style=wx.CB_DROPDOWN)
        self.combo_box_materiales_alambre.SetSelection(0)
        grid_sizer_14.Add(self.combo_box_materiales_alambre, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_40 = wx.StaticText(self.panel_2, wx.ID_ANY, "Diametro alambre [mm]:")
        label_40.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_14.Add(label_40, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.combo_box_diametros_alambre = wx.ComboBox(self.panel_2, wx.ID_ANY, choices=["0.9"], style=wx.CB_DROPDOWN)
        self.combo_box_diametros_alambre.SetSelection(0)
        grid_sizer_14.Add(self.combo_box_diametros_alambre, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_41 = wx.StaticText(self.panel_2, wx.ID_ANY, u"Gas de protección:")
        label_41.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_14.Add(label_41, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.combo_box_gases_proteccion = wx.ComboBox(self.panel_2, wx.ID_ANY, choices=["80AR-20CO2"], style=wx.CB_DROPDOWN)
        self.combo_box_gases_proteccion.SetSelection(0)
        grid_sizer_14.Add(self.combo_box_gases_proteccion, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_44 = wx.StaticText(self.panel_2, wx.ID_ANY, "Velocidad [m/min]:")
        label_44.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_14.Add(label_44, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.combo_box_velocidades = wx.ComboBox(self.panel_2, wx.ID_ANY, choices=["0.2", "0.3", "0.4", "0.5", "0.6"], style=wx.CB_DROPDOWN)
        self.combo_box_velocidades.SetSelection(0)
        grid_sizer_14.Add(self.combo_box_velocidades, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_42 = wx.StaticText(self.panel_2, wx.ID_ANY, "Amperaje [A]:")
        label_42.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_14.Add(label_42, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_amperaje = wx.TextCtrl(self.panel_2, wx.ID_ANY, "")
        grid_sizer_14.Add(self.text_ctrl_amperaje, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_43 = wx.StaticText(self.panel_2, wx.ID_ANY, "Voltaje [V]:")
        label_43.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_14.Add(label_43, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_voltaje = wx.TextCtrl(self.panel_2, wx.ID_ANY, "")
        grid_sizer_14.Add(self.text_ctrl_voltaje, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.panel_2, wx.ID_ANY, u"Geometría de cordones [mm]:"), wx.VERTICAL)
        sizer_procesamiento.Add(sizer_5, 1, wx.ALL | wx.EXPAND, 2)

        grid_sizer_geometria_cordones = wx.GridSizer(2, 2, 0, 0)
        sizer_5.Add(grid_sizer_geometria_cordones, 0, wx.EXPAND, 0)

        label_50 = wx.StaticText(self.panel_2, wx.ID_ANY, "Alto:")
        label_50.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_geometria_cordones.Add(label_50, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_alto_cordon = wx.TextCtrl(self.panel_2, wx.ID_ANY, "")
        grid_sizer_geometria_cordones.Add(self.text_ctrl_alto_cordon, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        label_51 = wx.StaticText(self.panel_2, wx.ID_ANY, "Ancho:")
        label_51.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        grid_sizer_geometria_cordones.Add(label_51, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_ancho_cordon = wx.TextCtrl(self.panel_2, wx.ID_ANY, "")
        grid_sizer_geometria_cordones.Add(self.text_ctrl_ancho_cordon, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        sizer_botones_posicion_pieza = wx.BoxSizer(wx.HORIZONTAL)
        sizer_procesamiento.Add(sizer_botones_posicion_pieza, 0, wx.EXPAND, 0)

        sizer_18 = wx.BoxSizer(wx.VERTICAL)
        sizer_botones_posicion_pieza.Add(sizer_18, 1, wx.EXPAND, 0)

        self.button_ver_pieza_elegida = wx.Button(self.panel_2, wx.ID_ANY, "Ver pieza")
        self.button_ver_pieza_elegida.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_18.Add(self.button_ver_pieza_elegida, 0, wx.ALL | wx.EXPAND, 3)

        self.button_orientar_visualmente = wx.Button(self.panel_2, wx.ID_ANY, "Orientar pieza")
        self.button_orientar_visualmente.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_18.Add(self.button_orientar_visualmente, 1, wx.ALL | wx.EXPAND, 3)

        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_botones_posicion_pieza.Add(sizer_19, 1, wx.EXPAND, 0)

        self.button_corte_pieza = wx.Button(self.panel_2, wx.ID_ANY, "Cortar pieza")
        self.button_corte_pieza.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_19.Add(self.button_corte_pieza, 1, wx.ALL | wx.EXPAND, 3)

        self.button_hardfacing = wx.Button(self.panel_2, wx.ID_ANY, "Hacer hardfacing")
        self.button_hardfacing.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_19.Add(self.button_hardfacing, 1, wx.ALL | wx.EXPAND, 3)

        self.panel_3 = wx.Panel(self, wx.ID_ANY)
        self.panel_3.SetBackgroundColour(wx.Colour(255, 255, 255))
        sizer_1.Add(self.panel_3, 1, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(sizer_21, 0, wx.EXPAND, 0)

        self.button_eliminar_curvas = wx.Button(self.panel_3, wx.ID_ANY, "Eliminar cortes manualmente")
        sizer_21.Add(self.button_eliminar_curvas, 1, wx.ALL | wx.EXPAND, 3)

        self.button_ver_cortes_copy = wx.Button(self.panel_3, wx.ID_ANY, "Ver cortes")
        sizer_21.Add(self.button_ver_cortes_copy, 1, wx.ALL | wx.EXPAND, 3)

        sizer_calculo_trayectorias = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_calculo_trayectorias, 0, wx.EXPAND, 0)

        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_calculo_trayectorias.Add(sizer_22, 0, wx.EXPAND, 0)

        self.button_calcular_trayectorias = wx.Button(self.panel_3, wx.ID_ANY, "Calcular trayectorias")
        sizer_22.Add(self.button_calcular_trayectorias, 1, wx.ALL | wx.EXPAND, 2)

        self.button_ver_trayectorias = wx.Button(self.panel_3, wx.ID_ANY, "Ver trayectorias")
        sizer_22.Add(self.button_ver_trayectorias, 1, wx.ALL | wx.EXPAND, 2)

        self.button_guardar_trayectorias = wx.Button(self.panel_3, wx.ID_ANY, "Guardar resultados")
        sizer_22.Add(self.button_guardar_trayectorias, 1, wx.ALL | wx.EXPAND, 2)

        sizer_consola = wx.StaticBoxSizer(wx.StaticBox(self.panel_3, wx.ID_ANY, "Consola"), wx.VERTICAL)
        sizer_3.Add(sizer_consola, 1, wx.EXPAND, 0)

        self.text_ctrl_consola = wx.TextCtrl(self.panel_3, wx.ID_ANY, u"Bienvenido a la herramienta de programación automática!\nIngresa los datos pedidos para calcular las trayectorias necesarias para reparar la pieza desgastada seleccionada.\n\n", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.text_ctrl_consola.SetBackgroundColour(wx.Colour(54, 54, 54))
        self.text_ctrl_consola.SetForegroundColour(wx.Colour(0, 255, 126))
        self.text_ctrl_consola.SetFont(wx.Font(12, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Courier New"))
        sizer_consola.Add(self.text_ctrl_consola, 1, wx.ALL | wx.EXPAND, 0)

        self.panel_3.SetSizer(sizer_2)

        self.panel_2.SetSizer(sizer_procesamiento)

        self.SetSizer(sizer_1)
        sizer_1.SetSizeHints(self)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.elegir_archivo_datos_pieza, self.button_seleccion_archivo)
        self.Bind(wx.EVT_RADIOBOX, self.eleccion_tipo_pieza, self.radio_box_tipo_pieza)
        self.Bind(wx.EVT_TEXT, self.calcular_geometria_cordones, self.combo_box_velocidades)
        self.Bind(wx.EVT_TEXT, self.calcular_voltaje, self.text_ctrl_amperaje)
        self.Bind(wx.EVT_TEXT, self.calcular_geometria_cordones, self.text_ctrl_voltaje)
        self.Bind(wx.EVT_BUTTON, self.visualizar_pieza_elegida, self.button_ver_pieza_elegida)
        self.Bind(wx.EVT_BUTTON, self.orientar_visualmente, self.button_orientar_visualmente)
        self.Bind(wx.EVT_BUTTON, self.cortar_pieza, self.button_corte_pieza)
        self.Bind(wx.EVT_BUTTON, self.hacer_hardfacing, self.button_hardfacing)
        self.Bind(wx.EVT_BUTTON, self.eliminar_contornos_de_cortes, self.button_eliminar_curvas)
        self.Bind(wx.EVT_BUTTON, self.ver_cortes, self.button_ver_cortes_copy)
        self.Bind(wx.EVT_BUTTON, self.calcular_trayectorias_relleno, self.button_calcular_trayectorias)
        self.Bind(wx.EVT_BUTTON, self.ver_trayectorias_generadas, self.button_ver_trayectorias)
        self.Bind(wx.EVT_BUTTON, self.guardar_resultados_trayectorias, self.button_guardar_trayectorias)
        # end wxGlade

    def elegir_archivo_datos_pieza(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'elegir_archivo_datos_pieza' not implemented!")
        event.Skip()

    def eleccion_tipo_pieza(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'eleccion_tipo_pieza' not implemented!")
        event.Skip()

    def calcular_geometria_cordones(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'calcular_geometria_cordones' not implemented!")
        event.Skip()

    def calcular_voltaje(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'calcular_voltaje' not implemented!")
        event.Skip()

    def visualizar_pieza_elegida(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'visualizar_pieza_elegida' not implemented!")
        event.Skip()

    def orientar_visualmente(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'orientar_visualmente' not implemented!")
        event.Skip()

    def cortar_pieza(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'cortar_pieza' not implemented!")
        event.Skip()

    def hacer_hardfacing(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'hacer_hardfacing' not implemented!")
        event.Skip()

    def eliminar_contornos_de_cortes(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'eliminar_contornos_de_cortes' not implemented!")
        event.Skip()

    def ver_cortes(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'ver_cortes' not implemented!")
        event.Skip()

    def calcular_trayectorias_relleno(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'calcular_trayectorias_relleno' not implemented!")
        event.Skip()

    def ver_trayectorias_generadas(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'ver_trayectorias_generadas' not implemented!")
        event.Skip()

    def guardar_resultados_trayectorias(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'guardar_resultados_trayectorias' not implemented!")
        event.Skip()

# end of class MainFrame

class DividirFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DividirFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((700, 560))
        self.SetTitle(u"Eliminación de Curvas")

        sizer_14 = wx.BoxSizer(wx.VERTICAL)

        self.panel_grafico = canvas_panel.CanvasPanel(self, wx.ID_ANY)
        self.panel_grafico.SetMinSize((100, 100))
        sizer_14.Add(self.panel_grafico, 1, wx.EXPAND, 0)

        self.panel_widgets = wx.Panel(self, wx.ID_ANY)
        self.panel_widgets.SetBackgroundColour(wx.Colour(255, 255, 255))
        sizer_14.Add(self.panel_widgets, 0, wx.EXPAND, 0)

        sizer_interaccion_contornos = wx.BoxSizer(wx.HORIZONTAL)

        label_curva_elegida = wx.StaticText(self.panel_widgets, wx.ID_ANY, "Curva")
        label_curva_elegida.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_interaccion_contornos.Add(label_curva_elegida, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.spin_ctrl_seleccion_curva = wx.SpinCtrl(self.panel_widgets, wx.ID_ANY, "0", min=0, max=100, style=wx.ALIGN_CENTRE_HORIZONTAL | wx.SP_ARROW_KEYS | wx.SP_WRAP)
        sizer_interaccion_contornos.Add(self.spin_ctrl_seleccion_curva, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.button_aplicar_eliminacion = wx.Button(self.panel_widgets, wx.ID_ANY, "Eliminar curva")
        sizer_interaccion_contornos.Add(self.button_aplicar_eliminacion, 1, wx.ALL | wx.EXPAND, 2)

        self.button_reiniciar_todas_capas = wx.Button(self.panel_widgets, wx.ID_ANY, "Reiniciar capas")
        sizer_interaccion_contornos.Add(self.button_reiniciar_todas_capas, 1, wx.ALL | wx.EXPAND, 2)

        self.button_guardar_subdivisiones = wx.Button(self.panel_widgets, wx.ID_ANY, "Guardar y salir")
        self.button_guardar_subdivisiones.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_interaccion_contornos.Add(self.button_guardar_subdivisiones, 1, wx.ALL | wx.EXPAND, 2)

        self.button_ver_grafico_anterior = wx.Button(self.panel_widgets, wx.ID_ANY, "Capa anterior")
        self.button_ver_grafico_anterior.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_interaccion_contornos.Add(self.button_ver_grafico_anterior, 1, wx.ALL | wx.EXPAND, 2)

        self.button_ver_grafico_sgte = wx.Button(self.panel_widgets, wx.ID_ANY, "Capa siguiente")
        self.button_ver_grafico_sgte.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_interaccion_contornos.Add(self.button_ver_grafico_sgte, 1, wx.ALL | wx.EXPAND, 2)

        self.panel_widgets.SetSizer(sizer_interaccion_contornos)

        self.SetSizer(sizer_14)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.eliminar_curvas, self.button_aplicar_eliminacion)
        self.Bind(wx.EVT_BUTTON, self.reiniciar_capas, self.button_reiniciar_todas_capas)
        self.Bind(wx.EVT_BUTTON, self.guardar_eliminaciones_salir, self.button_guardar_subdivisiones)
        self.Bind(wx.EVT_BUTTON, self.moverse_grafico_anterior, self.button_ver_grafico_anterior)
        self.Bind(wx.EVT_BUTTON, self.moverse_grafico_siguiente, self.button_ver_grafico_sgte)
        # end wxGlade

    def eliminar_curvas(self, event):  # wxGlade: DividirFrame.<event_handler>
        print("Event handler 'eliminar_curvas' not implemented!")
        event.Skip()

    def reiniciar_capas(self, event):  # wxGlade: DividirFrame.<event_handler>
        print("Event handler 'reiniciar_capas' not implemented!")
        event.Skip()

    def guardar_eliminaciones_salir(self, event):  # wxGlade: DividirFrame.<event_handler>
        print("Event handler 'guardar_eliminaciones_salir' not implemented!")
        event.Skip()

    def moverse_grafico_anterior(self, event):  # wxGlade: DividirFrame.<event_handler>
        print("Event handler 'moverse_grafico_anterior' not implemented!")
        event.Skip()

    def moverse_grafico_siguiente(self, event):  # wxGlade: DividirFrame.<event_handler>
        print("Event handler 'moverse_grafico_siguiente' not implemented!")
        event.Skip()

# end of class DividirFrame

class OrientarFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: OrientarFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((600, 500))
        self.SetTitle("Orientar Visualmente")

        sizer_graph_orient_frame = wx.BoxSizer(wx.VERTICAL)

        self.panel_3d = canvas_panel.VedoPanel(self, wx.ID_ANY)
        sizer_graph_orient_frame.Add(self.panel_3d, 1, wx.EXPAND, 0)

        self.panel_widgets = wx.Panel(self, wx.ID_ANY)
        self.panel_widgets.SetBackgroundColour(wx.Colour(255, 255, 255))
        sizer_graph_orient_frame.Add(self.panel_widgets, 0, wx.EXPAND, 0)

        sizer_interaccion_contornos = wx.BoxSizer(wx.HORIZONTAL)

        self.radio_box_1 = wx.RadioBox(self.panel_widgets, wx.ID_ANY, u"Tipo Orientación", choices=[u"Automática", "Manual"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
        self.radio_box_1.SetSelection(0)
        sizer_interaccion_contornos.Add(self.radio_box_1, 1, wx.ALL | wx.EXPAND, 2)

        self.button_orientar = wx.Button(self.panel_widgets, wx.ID_ANY, "Orientar Malla")
        sizer_interaccion_contornos.Add(self.button_orientar, 1, wx.ALIGN_BOTTOM | wx.ALL, 2)

        self.button_reset_orientacion = wx.Button(self.panel_widgets, wx.ID_ANY, u"Reset Orientación")
        sizer_interaccion_contornos.Add(self.button_reset_orientacion, 1, wx.ALIGN_BOTTOM | wx.ALL, 2)

        self.button_guardar_orientacion = wx.Button(self.panel_widgets, wx.ID_ANY, u"Guardar Orientación y Cerrar")
        sizer_interaccion_contornos.Add(self.button_guardar_orientacion, 1, wx.ALIGN_BOTTOM | wx.ALL, 2)

        self.panel_widgets.SetSizer(sizer_interaccion_contornos)

        self.SetSizer(sizer_graph_orient_frame)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_RADIOBOX, self.elegir_tipo_orientacion, self.radio_box_1)
        self.Bind(wx.EVT_BUTTON, self.orientar_malla, self.button_orientar)
        self.Bind(wx.EVT_BUTTON, self.reset_ptos_elegidos, self.button_reset_orientacion)
        self.Bind(wx.EVT_BUTTON, self.guardar_orientacion_pieza, self.button_guardar_orientacion)
        # end wxGlade

    def elegir_tipo_orientacion(self, event):  # wxGlade: OrientarFrame.<event_handler>
        print("Event handler 'elegir_tipo_orientacion' not implemented!")
        event.Skip()

    def orientar_malla(self, event):  # wxGlade: OrientarFrame.<event_handler>
        print("Event handler 'orientar_malla' not implemented!")
        event.Skip()

    def reset_ptos_elegidos(self, event):  # wxGlade: OrientarFrame.<event_handler>
        print("Event handler 'reset_ptos_elegidos' not implemented!")
        event.Skip()

    def guardar_orientacion_pieza(self, event):  # wxGlade: OrientarFrame.<event_handler>
        print("Event handler 'guardar_orientacion_pieza' not implemented!")
        event.Skip()

# end of class OrientarFrame

class HardfacingFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: HardfacingFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((480, 570))
        self.SetTitle(u"Elección trayectorias de soldadura")

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        self.panel_3d = canvas_panel.VedoPanel(self, wx.ID_ANY)
        self.panel_3d.SetMinSize((100, 100))
        sizer_4.Add(self.panel_3d, 1, wx.EXPAND, 0)

        self.panel_widgets_trayectorias = wx.Panel(self, wx.ID_ANY)
        self.panel_widgets_trayectorias.SetBackgroundColour(wx.Colour(255, 255, 255))
        sizer_4.Add(self.panel_widgets_trayectorias, 0, wx.EXPAND, 0)

        sizer_interaccion_contornos = wx.BoxSizer(wx.HORIZONTAL)

        sizer_interaccion_contornos.Add((20, 20), 0, 0, 0)

        label_1 = wx.StaticText(self.panel_widgets_trayectorias, wx.ID_ANY, "Cantidad de capas:")
        sizer_interaccion_contornos.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_interaccion_contornos.Add((20, 20), 0, 0, 0)

        self.spin_ctrl_cantidad_capas = wx.SpinCtrl(self.panel_widgets_trayectorias, wx.ID_ANY, "1", min=1, max=100, style=wx.ALIGN_CENTRE_HORIZONTAL | wx.SP_ARROW_KEYS | wx.SP_WRAP)
        sizer_interaccion_contornos.Add(self.spin_ctrl_cantidad_capas, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_interaccion_contornos.Add((20, 20), 0, 0, 0)

        self.button_reiniciar = wx.Button(self.panel_widgets_trayectorias, wx.ID_ANY, "Reiniciar")
        self.button_reiniciar.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_interaccion_contornos.Add(self.button_reiniciar, 1, wx.ALL | wx.EXPAND, 2)

        self.button_guardar_salir = wx.Button(self.panel_widgets_trayectorias, wx.ID_ANY, "Guardar y salir")
        self.button_guardar_salir.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_interaccion_contornos.Add(self.button_guardar_salir, 1, wx.ALL | wx.EXPAND, 2)

        self.panel_widgets_trayectorias.SetSizer(sizer_interaccion_contornos)

        self.SetSizer(sizer_4)

        self.Layout()

        self.Bind(wx.EVT_SPINCTRL, self.cambiar_cant_capas, self.spin_ctrl_cantidad_capas)
        self.Bind(wx.EVT_BUTTON, self.reiniciar_panel, self.button_reiniciar)
        self.Bind(wx.EVT_BUTTON, self.guardar_eleccion, self.button_guardar_salir)
        # end wxGlade

    def cambiar_cant_capas(self, event):  # wxGlade: HardfacingFrame.<event_handler>
        print("Event handler 'cambiar_cant_capas' not implemented!")
        event.Skip()

    def reiniciar_panel(self, event):  # wxGlade: HardfacingFrame.<event_handler>
        print("Event handler 'reiniciar_panel' not implemented!")
        event.Skip()

    def guardar_eleccion(self, event):  # wxGlade: HardfacingFrame.<event_handler>
        print("Event handler 'guardar_eleccion' not implemented!")
        event.Skip()

# end of class HardfacingFrame

class VerPiezaFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: VerPiezaFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((690, 630))
        self.SetTitle("Ver Pieza y Cortes")

        sizer_panel3d = wx.BoxSizer(wx.VERTICAL)

        self.panel_3d = canvas_panel.VedoPanel(self, wx.ID_ANY)
        sizer_panel3d.Add(self.panel_3d, 1, wx.EXPAND, 0)

        self.SetSizer(sizer_panel3d)

        self.Layout()
        # end wxGlade

# end of class VerPiezaFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
